#ifndef NES_EMULATOR_H_
#define NES_EMULATOR_H_

#include "cpu/cpu6502.h"
#include "cpuBus.h"
#include "cpu/cpu6502debug.h"
#include "cartridge/cartridge.h"
#include "frameBuffer.h"
#include "inputOutput/IOInterface.h"
#include "ppu/ppuDebug.h"
#include "ppuBus.h"
#include <cstdint>
#include <string>

namespace nesCore {
class NesEmulator {
public:
    NesEmulator();
    ~NesEmulator();

// Public methods
public:
    // Get a pointer to the emulator frame buffer
    FrameBuffer* getFrameBuffer();
    // Load a cartridge from a file
    void loadCartridge(const std::string& filename);
    // Attach an IO interface to the emulator
    void attachIO(IOInterface* interface);

    // Load the color palette from file
    void loadPalette(const std::string& filename);

    // Execute one CPU instruction
    void step();
    bool frameReady();

    // Debug info
    //
    // Return a sting with a formatted region of the bus
    // Take a memory range as input (both extreme are included)
    std::string formatBusRange(uint16_t from, uint16_t to, uint width);
    // Decompile instruction
    std::string decompileInstruction(uint16_t addr);
    // Return CPU or PPU debug info
    debug::Cpu6502Debug cpuDebugInfo();
    debug::PPUDebug ppuDebugInfo();

// Private member variables
private:
    Bus m_cpuBus;
    PpuBus m_ppuBus;

    // Interrupt Generated by the PPU
    Interrupt6502 m_ppuInt;

    // The emulator frame buffer
    FrameBuffer m_frameBuffer;

    Cartridge* mp_cartridge;
};
}

#endif
